When would you want to create a remote repository rather than keeping all your work local?

    I can think of two important reasons to create a remote repository.  The first reason is to have a backup of projects that is kept off-site.  The second reason would be used for collaboration with other developers with respect to your project.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

   If you allow your remote repository to be updated by other trusted contributors you want to ensure that the changes you pull back into your local repository are changes that you wish to commit.  Manually pulling information gives the developer more control over his\her source code and the ability to pull only changes they wish to incorporate.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

   Branches are tied to a single repository and as the name suggests is a branch which stems from the master. Branches can be used to test out additional experimental code before actually merging the branch back into the master.  A clone is taking an existing repository and making a copy of the clone.  A fork is used within the context of Github and is essentially the same as a clone but can only be used to make a copy of an existing repository within Github. Forks will be used when you want to make a copy of an existing repository to another repository within Github.  Clones can be used to make a copy of a local repository to another local repository or a remote repository to a local repository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

You want to make sure you have the latest state of the remote branches based on the last time you push or pulled the branch.  Keeping state information will insure that the correct updates are applied to the remote repository.  The inverse of this will be true when you pull updates from a remote.  Also, maintaining the state information will help resolve conflicts when the remote and local repositories have changes that need to be resolved.


How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

One way is to you use a common file share repository.  The developers using this method could communicate using email or IM with respect to changes that needed to be made.  This form of collaboration is obviously time consuming and clunky.  Using a version control system such as Git\Github is much more elegant solution.  Change history, change communication, commenting and the ability to merge changes within a common platform not only makes developer collaboration easier bit also saves time and reduces the development lifecycle.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

The reason you would want to create a branch off the master would be to make changes to your code that you do not want to immediately commit to master.  You could then push this branch to git hub and request collaboration from other developers.  Once changes have been agreed upon the branch can eventually be merged into the master. Making changes in the master and pushing and pulling changes from master is easier and requires less time keeping up with changes that others are making.
