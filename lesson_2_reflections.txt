What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository it prepares the repository to begin tracking 		changes of files within that repository. If you do not initialize the repository you 	will not be able to make commits to respective files within the directory nor will 		you be able to perform other useful functions employed by Git.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is used to add files that you want to work with and use commits 		against to begin tracking changes.  Once the files have been added to the staging 		area you can use commit to begin tracking the changes within the repository.  There 		are some files that you may not want to track and some files that you wish to add to 	the staging area that will be committed at the same time.  The level of separation 		gives you more flexibility with respect to how you manage a project and apply 			version control.

How can you use the staging area to make sure you have one commit per logical
change?

	You could use the "git diff --staged" command to compare the staging directory to 		the latest commit in the repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	There may be situations when you would like your code to diverge from the master but 		you still need to keep the master intact.  An example where branches might be useful 		is if you wanted to add some experimental code to your project while insuring your 		main(working) code stays intact.  Creating this branch allows you to add changes and 		keep all changes that have been previously made in the master.  Another use for 		branches could be used when multiple developers need to work on the same project.  You 	might create a branch for a bug fix that a particular developer is responsible for 		fixing.  While one developer works on the bug fix branch another devloper can continue 	to add features to the master branch.


How do the diagrams help you visualize the branch structure?

	Diagramming will help the developer understand where code diverges and changes that 		have been made since the branch was created.  Diagramming also show the reachability 		of the branch and will aid when the developer wished to merge branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging two branches together is to combine the recent and historical 		changes of a respective branch with that of the master thus creating a new tip of the 		master branch.  At this point the branch can be deleted due to the fact that all 		changes from the branch and master are now combined into a new tip.  The displayed 		representation represents a logical view of changes within each respective branch and 		where branches could be merged along with any other branches that may remain outside 		of the master. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Using Git to automatically perform merges helps to simplify the merger process and 	reduce time spent trying to manually merge two branches together.  Git provides many 	visual representations to help the developer understand what is being merged and also 	help to detect potential conflicts.  However, sometimes conflicts cannot be resolved 	by Git in which case the developers who made the respective changes to the same part 	of the code will need to collaborate to ensure the proper change is committed.