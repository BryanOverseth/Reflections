What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository it prepares the repository to begin tracking 		changes of files within that repository. If you do not initialize the repository you 	will not be able to make commits to respective files within the directory nor will 		you be able to perform other useful functions employed by Git.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is used to add files that you want to work with and use commits 		against to begin tracking changes.  Once the files have been added to the staging 		area you can use commit to begin tracking the changes within the repository.  There 		are some files that you may not want to track and some files that you wish to add to 	the staging area that will be committed at the same time.  The level of separation 		gives you more flexibility with respect to how you manage a project and apply 		version control.

How can you use the staging area to make sure you have one commit per logical
change?

	You could use the "git diff --staged" command to compare the staging directory to 	the latest commit in the repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?